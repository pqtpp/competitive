"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var dag_1 = require("./dag");
var bindInjector = function (wrapped, dependedBy) {
    var injector = {};
    var _loop_1 = function (key) {
        Object.defineProperty(injector, key, {
            get: function () {
                return wrapped[key](dependedBy);
            },
        });
    };
    for (var key in wrapped) {
        _loop_1(key);
    }
    return injector;
};
var wrapResolve = function (context) { return function (key) {
    var underlying = context.underlying, dag = context.dag, wrappedInjector = context.wrappedInjector;
    var resolved;
    return function (dependedBy) {
        if (typeof dependedBy === 'undefined') {
            dag.addNode(key);
        }
        else {
            dag.addEdge(dependedBy, key);
        }
        if (typeof resolved === 'undefined') {
            var injector = bindInjector(wrappedInjector, key);
            resolved = underlying[key].resolve(injector).catch(function (e) {
                if (e.hasOwnProperty('__root_error__')) {
                    throw e;
                }
                else {
                    var rootError = new Error("failed to resolve \"" + key + "\" because: " + e.message);
                    Object.assign(rootError, { __root_error__: true }); // eslint-disable-line @typescript-eslint/camelcase
                    throw rootError;
                }
            });
        }
        return resolved;
    };
}; };
var buildContainer = function (injector) { return __awaiter(void 0, void 0, void 0, function () {
    var container, promises, _loop_2, key;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                container = {};
                promises = [];
                _loop_2 = function (key) {
                    promises.push(injector[key]().then(function (value) {
                        container[key] = value;
                    }));
                };
                for (key in injector) {
                    _loop_2(key);
                }
                return [4 /*yield*/, Promise.all(promises)];
            case 1:
                _a.sent();
                return [2 /*return*/, container];
        }
    });
}); };
var defaultPromisesHandler = function (ps) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Promise.all(ps)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var buildFinalize = function (context) {
    var finalized = false;
    return function (promisesHandler) {
        if (promisesHandler === void 0) { promisesHandler = defaultPromisesHandler; }
        return __awaiter(void 0, void 0, void 0, function () {
            var container, dag, underlying;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (finalized) {
                            throw new Error('already finalized');
                        }
                        finalized = true;
                        container = context.container, dag = context.dag, underlying = context.underlying;
                        return [4 /*yield*/, dag.dependenciesForEachDepth().reduce(function (acc, keys) { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, acc];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, promisesHandler(keys.map(function (key) { return underlying[key].finalize(container[key]); }))];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, Promise.resolve())];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
};
function resolve(underlying) {
    return __awaiter(this, void 0, void 0, function () {
        var dag, wrappedInjector, resolveFor, key, container, finalize;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    dag = new dag_1.DAG();
                    wrappedInjector = {};
                    resolveFor = wrapResolve({
                        underlying: underlying,
                        dag: dag,
                        wrappedInjector: wrappedInjector,
                    });
                    for (key in underlying) {
                        wrappedInjector[key] = resolveFor(key);
                    }
                    return [4 /*yield*/, buildContainer(wrappedInjector)];
                case 1:
                    container = _a.sent();
                    finalize = buildFinalize({ container: container, dag: dag, underlying: underlying });
                    return [2 /*return*/, { container: container, finalize: finalize }];
            }
        });
    });
}
exports.resolve = resolve;
